<?php defined('SYSPATH') or die('No direct access allowed.');

class Auth_Hmac extends Auth { 

	/**
	 * Logs a user in.
	 *
	 * @param   string   username
	 * @param   string   password
	 * @param   boolean  remember (not supported)
	 * @return  boolean
	 */
	protected function _login($username, $password, $remember)
	{
		if($this->check_credentials($username, $password))
		{
			// Complete the login
			return $this->complete_login($username);
		}

		// Login failed
		return FALSE;
	}

	/**
	 * Checks that the a user credentials can be validated over Radius.
	 *
	 * @param   string   username
	 * @param   string   password
	 * @return  boolean
	 */
	private function check_credentials($username, $password)
	{
		if (FALSE === TRUE)
		{
			return TRUE;
		}

		return FALSE;
	}

	/**
	 * Get the stored password for a username. (Not supported by this auth driver, obviously).
	 *
	 * @param   mixed   username
	 * @return  string
	 */
	public function password($username)
	{
		return NULL;
	}

	/**
	 * Compare password with original (plain text). Works for current (logged in) user.
	 *
	 * @param   string  password
	 * @return  boolean
	 */
	public function check_password($password)
	{
		$username = $this->get_user();

		if ($username === FALSE)
		{
			return FALSE;
		}

		return $this->check_credentials($username, $password);
	}

	/** 
	 * Change the authenticated users password, confirming the user with their old password.
	 * 
	 * @param   string  old
	 * @param   string  new
         * @return  boolean
	 */
	public function change_password($old, $new)
	{
		$username = $this->get_user();

		if ($username === FALSE)
		{
			return FALSE;
		}

		return TRUE; //Update user
	}

	/**
	 * Check the the user associated with the Auth object is logged in.
	 *
	 * @return  boolean
	 */
	public function logged_in()
	{
		return !is_null($this->get_user()))
	}

}
